#!/usr/bin/env zsh
# Copyright (c) 2011 Tristan Le Guern <tristan.le-guern@epitech.eu>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

emulate -L zsh
setopt no_sh_word_split null_glob no_ksh_arrays
zmodload zsh/net/tcp
set -e

if [[ `which md5` == "md5 not found" ]];then
       	system=linux
else
	system=bsd
fi

zsoul_name=$0

typeset -A gl_option
gl_option[login]=""
gl_option[pass]=""
gl_option[log]="/tmp/zsoul.log"
gl_option[host]="ns-server.epita.fr"
gl_option[port]="4242"
gl_option[data]="zsoul"
gl_option[location]="dans ton cul"
gl_option[conf]=""

trap "zs_close" INT
trap "zs_option_conf" HUP

function zs_option_env {
	if [[ "$SOCKS_USERNAME" != "" ]] gl_option[login]=$SOCKS_USERNAME
	if [[ "$SOCKS_PASSWORD" != "" ]] gl_option[pass]=$SOCKS_PASSWORD
	if [[ "$ZSOUL_CONF" != "" ]] gl_option[conf]=$ZSOUL_CONF
}

function zs_option_conf {
	if [[ -r "$gl_option[conf]" ]];then
		source $gl_option[conf]
		zs_print_log "Load $gl_option[conf]"
	else
		zs_print_log "Unable to load $gl_option[conf]"
	fi
}

function zs_option_cli {
	zparseopts h=o_help
	
	if [[ $? != 0 || "$o_help" != "" ]]; then
		echo Usage: $(basename "$zsoul_name") "[-h] [file]"
		exit 64 #EX_USAGE
	fi

	if [[ -n "$@[$OPTIND]" ]] gl_option[conf]=$@[$OPTIND]
}

function zs_print_log {
	if [[ "$#1" -ne 0 ]] print "$1" >> $gl_option[log]
}

function zs_connect {
	zs_print_log "Connection to $gl_option[host]:$gl_option[port]"
	ztcp $gl_option[host] $gl_option[port]
	fd=$REPLY
	read -r ns_reply <&$fd
	# ns_ret is an array with usefull values for authentification
	ns_ret=( $(echo $ns_reply | cut -d ' ' -f 3,4,5) )
}

function zs_init_auth {
	print auth_ag ext_user none none >&$fd
	read -r ns_reply <&$fd
	if [[ "$ns_reply" != "rep 002 -- cmd end" ]]; then
		zs_print_log "Authentication does not succeed"
		zs_close
	fi
}

function zs_hash_bsd {
	echo `md5 -s "${ns_ret[1]}-${ns_ret[2]}/${ns_ret[3]}$gl_option[pass]" | cut -d ' ' -f 4`
}

function zs_hash_linux {
	echo -n "${ns_ret[1]}-${ns_ret[2]}/${ns_ret[3]}$gl_option[pass]" | md5sum | cut -d ' ' -f 1
}

function zs_auth {
	zs_init_auth

	local hash="$(zs_hash_$system)"
	print ext_user_log $gl_option[login] $hash `zs_encode $gl_option[location]` `zs_encode $gl_option[data]` >&$fd
	read -r ns_reply <&$fd
	if [[ "$ns_reply" != "rep 002 -- cmd end" ]]; then
		zs_print_log "Authentication does not succeed"
		zs_print_log $ns_reply[@]
		zs_close
	else
		zs_print_log "Authentication succeed"
	fi

}

function zs_status {
	local zs_status
	case $1 in
		(actif | away | connection | idle | lock | server) zs_status=$1;;
		(*) zs_status="none";;
	esac
	zs_print_log "Switch to status : $zs_status"
	print user_cmd state $zs_status >&$fd
}

function zs_loop {
	while true; do
		read -r ns_reply <&$fd
		# changing ns_event to a local array cause a bug in zsh
		ns_event=( $(echo $ns_reply) )
		if [[ "${ns_event[1]}" == "ping" ]];then
			print "`echo $ns_reply`" >&$fd
		else
			zs_print_log "Unknown command: $ns_reply"
		fi
	done
}

function zs_close {
	ztcp -c $fd
	zs_print_log "Bye"
	exit 0
}

function zs_encode {
	tmp=`echo $1 | sed "s/%/\%25/g"`
	tmp=`echo $tmp | sed "s/'/\%27/g"`
	tmp=`echo $tmp | sed -r s/"([^a-zA-Z0-9_\.-\\%])"/" ;printf \"%%%x\" \"'&\"; echo -n "/g`
	eval echo -n "$tmp"
}

zs_option_env
zs_option_cli $@
zs_option_conf
zs_connect
zs_auth
zs_status "actif"
zs_loop
